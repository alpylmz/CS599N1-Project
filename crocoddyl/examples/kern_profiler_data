Timer unit: 1e-06 s

Total time: 1.12613 s
File: arm_manipulation_invdyn.py
Function: foo at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           @profile
    13                                           def foo():
    14         1         10.7     10.7      0.0      WITHDISPLAY = "display" in sys.argv or "CROCODDYL_DISPLAY" in os.environ
    15         1          2.9      2.9      0.0      WITHPLOT = "plot" in sys.argv or "CROCODDYL_PLOT" in os.environ
    16         1         19.3     19.3      0.0      signal.signal(signal.SIGINT, signal.SIG_DFL)
    17                                           
    18                                               # In this example test, we will solve the reaching-goal task with the Kinova arm.
    19                                               # For that, we use the inverse dynamics (with its analytical derivatives) developed
    20                                               # inside crocoddyl; it is described inside DifferentialActionModelFreeInvDynamics class.
    21                                               # Finally, we use an Euler sympletic integration scheme.
    22                                           
    23                                               # First, let's load create the state and actuation models
    24         1     887992.7 887992.7     78.9      kinova = example_robot_data.load("kinova")
    25         1          0.3      0.3      0.0      robot_model = kinova.model
    26         1         14.8     14.8      0.0      state = crocoddyl.StateMultibody(robot_model)
    27         1         70.9     70.9      0.0      actuation = crocoddyl.ActuationModelFull(state)
    28         1          3.6      3.6      0.0      q0 = kinova.model.referenceConfigurations["arm_up"]
    29         1         14.4     14.4      0.0      x0 = np.concatenate([q0, pinocchio.utils.zero(robot_model.nv)])
    30                                           
    31                                               # Create a cost model per the running and terminal action model.
    32         1          2.0      2.0      0.0      nu = state.nv
    33         1          8.2      8.2      0.0      runningCostModel = crocoddyl.CostModelSum(state, nu)
    34         1          1.4      1.4      0.0      terminalCostModel = crocoddyl.CostModelSum(state, nu)
    35                                           
    36                                               # Note that we need to include a cost model (i.e. set of cost functions) in
    37                                               # order to fully define the action model for our optimal control problem.
    38                                               # For this particular example, we formulate three running-cost functions:
    39                                               # goal-tracking cost, state and control regularization; and one terminal-cost:
    40                                               # goal cost. First, let's create the common cost functions.
    41         2          5.1      2.6      0.0      framePlacementResidual = crocoddyl.ResidualModelFramePlacement(
    42         1          0.2      0.2      0.0          state,
    43         1          1.8      1.8      0.0          robot_model.getFrameId("j2s6s200_end_effector"),
    44         1         18.3     18.3      0.0          pinocchio.SE3(np.eye(3), np.array([0.6, 0.2, 0.5])),
    45         1          0.1      0.1      0.0          nu,
    46                                               )
    47         1          7.5      7.5      0.0      uResidual = crocoddyl.ResidualModelJointEffort(state, actuation, nu)
    48         1          4.4      4.4      0.0      xResidual = crocoddyl.ResidualModelState(state, x0, nu)
    49         1          6.5      6.5      0.0      goalTrackingCost = crocoddyl.CostModelResidual(state, framePlacementResidual)
    50         1          2.3      2.3      0.0      xRegCost = crocoddyl.CostModelResidual(state, xResidual)
    51         1          2.2      2.2      0.0      uRegCost = crocoddyl.CostModelResidual(state, uResidual)
    52                                           
    53                                               # Then let's added the running and terminal cost functions
    54         1          6.2      6.2      0.0      runningCostModel.addCost("gripperPose", goalTrackingCost, 1)
    55         1          1.9      1.9      0.0      runningCostModel.addCost("xReg", xRegCost, 1e-1)
    56         1          1.3      1.3      0.0      runningCostModel.addCost("uReg", uRegCost, 1e-1)
    57         1          0.9      0.9      0.0      terminalCostModel.addCost("gripperPose", goalTrackingCost, 1e3)
    58                                           
    59                                               # Next, we need to create an action model for running and terminal knots. The
    60                                               # forward dynamics (computed using RNEA) are implemented
    61                                               # inside DifferentialActionModelFreeInvDynamics.
    62         1          0.2      0.2      0.0      dt = 1e-2
    63         2          8.6      4.3      0.0      runningModel = crocoddyl.IntegratedActionModelEuler(
    64         2          6.8      3.4      0.0          crocoddyl.DifferentialActionModelFreeInvDynamics(
    65         1          0.2      0.2      0.0              state, actuation, runningCostModel
    66                                                   ),
    67         1          0.2      0.2      0.0          dt,
    68                                               )
    69         2          2.0      1.0      0.0      terminalModel = crocoddyl.IntegratedActionModelEuler(
    70         2          2.5      1.3      0.0          crocoddyl.DifferentialActionModelFreeInvDynamics(
    71         1          0.2      0.2      0.0              state, actuation, terminalCostModel
    72                                                   ),
    73         1          0.2      0.2      0.0          0.0,
    74                                               )
    75                                           
    76                                               # For this optimal control problem, we define 100 knots (or running action
    77                                               # models) plus a terminal knot
    78         1          0.2      0.2      0.0      T = 100
    79         1       1523.7   1523.7      0.1      problem = crocoddyl.ShootingProblem(x0, [runningModel] * T, terminalModel)
    80                                           
    81                                               # Creating the solver for this OC problem, defining a logger
    82         1        138.8    138.8      0.0      solver = crocoddyl.SolverIntro(problem)
    83         1          0.4      0.4      0.0      cameraTF = [2.0, 2.68, 0.54, 0.2, 0.62, 0.72, 0.22]
    84         1          0.3      0.3      0.0      if WITHDISPLAY:
    85                                                   try:
    86                                                       import gepetto
    87                                           
    88                                                       gepetto.corbaserver.Client()
    89                                                       display = crocoddyl.GepettoDisplay(kinova, 4, 4, cameraTF, floor=False)
    90                                                       if WITHPLOT:
    91                                                           solver.setCallbacks(
    92                                                               [
    93                                                                   crocoddyl.CallbackVerbose(),
    94                                                                   crocoddyl.CallbackLogger(),
    95                                                                   crocoddyl.CallbackDisplay(display),
    96                                                               ]
    97                                                           )
    98                                                       else:
    99                                                           solver.setCallbacks(
   100                                                               [crocoddyl.CallbackVerbose(), crocoddyl.CallbackDisplay(display)]
   101                                                           )
   102                                                   except Exception:
   103                                                       display = crocoddyl.MeshcatDisplay(kinova)
   104         1          0.2      0.2      0.0      if WITHPLOT:
   105                                                   solver.setCallbacks(
   106                                                       [
   107                                                           crocoddyl.CallbackVerbose(),
   108                                                           crocoddyl.CallbackLogger(),
   109                                                       ]
   110                                                   )
   111                                               else:
   112         1         21.1     21.1      0.0          solver.setCallbacks([crocoddyl.CallbackVerbose()])
   113         1          7.0      7.0      0.0      solver.getCallbacks()[0].precision = 3
   114         1          3.8      3.8      0.0      solver.getCallbacks()[0].level = crocoddyl.VerboseLevel._2
   115                                           
   116                                               # Solving it with the solver algorithm
   117         1     235769.8 235769.8     20.9      solver.solve()
   118                                           
   119         2        282.0    141.0      0.0      print(
   120         1          0.6      0.6      0.0          "Finally reached = ",
   121         2        149.2     74.6      0.0          solver.problem.terminalData.differential.multibody.pinocchio.oMf[
   122         1          6.4      6.4      0.0              robot_model.getFrameId("j2s6s200_end_effector")
   123                                                   ].translation.T,
   124                                               )
   125                                           
   126                                               # Plotting the solution and the solver convergence
   127         1          0.4      0.4      0.0      if WITHPLOT:
   128                                                   log = solver.getCallbacks()[1]
   129                                                   crocoddyl.plotOCSolution(
   130                                                       solver.xs,
   131                                                       [d.differential.multibody.joint.tau for d in solver.problem.runningDatas],
   132                                                       figIndex=1,
   133                                                       show=False,
   134                                                   )
   135                                                   crocoddyl.plotConvergence(
   136                                                       log.costs, log.u_regs, log.x_regs, log.grads, log.stops, log.steps, figIndex=2
   137                                                   )
   138                                           
   139                                               # Visualizing the solution in gepetto-viewer
   140         1          0.4      0.4      0.0      if WITHDISPLAY:
   141                                                   display.rate = -1
   142                                                   display.freq = 1
   143                                                   while True:
   144                                                       display.displayFromSolver(solver)
   145                                                       time.sleep(1.0)

