Timer unit: 1e-06 s

Total time: 1.68599 s
File: arm_manipulation_invdyn.py
Function: foo at line 12

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    12                                           @profile
    13                                           def foo():
    14         1         10.6     10.6      0.0      crocoddyl.enable_profiler()
    15         1         15.7     15.7      0.0      WITHDISPLAY = "display" in sys.argv or "CROCODDYL_DISPLAY" in os.environ
    16         1          4.9      4.9      0.0      WITHPLOT = "plot" in sys.argv or "CROCODDYL_PLOT" in os.environ
    17         1         31.7     31.7      0.0      signal.signal(signal.SIGINT, signal.SIG_DFL)
    18                                           
    19                                               # In this example test, we will solve the reaching-goal task with the Kinova arm.
    20                                               # For that, we use the inverse dynamics (with its analytical derivatives) developed
    21                                               # inside crocoddyl; it is described inside DifferentialActionModelFreeInvDynamics class.
    22                                               # Finally, we use an Euler sympletic integration scheme.
    23                                           
    24                                               # First, let's load create the state and actuation models
    25         1    1604075.0    2e+06     95.1      kinova = example_robot_data.load("iiwa") #baxter, hyq, iiwa, jaco(not here)
    26         1          0.4      0.4      0.0      robot_model = kinova.model
    27                                               #iiwa7 = example_robot_data.load("iiwa7")
    28                                               #robot_model = iiwa7.model
    29         1         14.7     14.7      0.0      state = crocoddyl.StateMultibody(robot_model)
    30         1         91.3     91.3      0.0      actuation = crocoddyl.ActuationModelFull(state)
    31         1          6.7      6.7      0.0      q0 = kinova.model.referenceConfigurations["arm_up"] #need to change for different robots
    32         1         21.9     21.9      0.0      x0 = np.concatenate([q0, pinocchio.utils.zero(robot_model.nv)])
    33         1          2.2      2.2      0.0      crocoddyl.disable_profiler()
    34                                           
    35                                               # Create a cost model per the running and terminal action model.
    36         1          2.9      2.9      0.0      nu = state.nv
    37         1          6.0      6.0      0.0      runningCostModel = crocoddyl.CostModelSum(state, nu)
    38         1          2.1      2.1      0.0      terminalCostModel = crocoddyl.CostModelSum(state, nu)
    39                                           
    40                                               # Note that we need to include a cost model (i.e. set of cost functions) in
    41                                               # order to fully define the action model for our optimal control problem.
    42                                               # For this particular example, we formulate three running-cost functions:
    43                                               # goal-tracking cost, state and control regularization; and one terminal-cost:
    44                                               # goal cost. First, let's create the common cost functions.
    45         2          7.3      3.6      0.0      framePlacementResidual = crocoddyl.ResidualModelFramePlacement(
    46         1          0.2      0.2      0.0          state,
    47         1          3.1      3.1      0.0          robot_model.getFrameId("iiwa_joint_ee"),
    48         1         32.8     32.8      0.0          pinocchio.SE3(np.eye(3), np.array([0.6, 0.2, 0.5])),
    49         1          0.3      0.3      0.0          nu,
    50                                               )
    51         1         10.6     10.6      0.0      uResidual = crocoddyl.ResidualModelJointEffort(state, actuation, nu)
    52         1          6.2      6.2      0.0      xResidual = crocoddyl.ResidualModelState(state, x0, nu)
    53         1          9.3      9.3      0.0      goalTrackingCost = crocoddyl.CostModelResidual(state, framePlacementResidual)
    54         1          3.8      3.8      0.0      xRegCost = crocoddyl.CostModelResidual(state, xResidual)
    55         1          3.7      3.7      0.0      uRegCost = crocoddyl.CostModelResidual(state, uResidual)
    56                                           
    57                                               # Then let's added the running and terminal cost functions
    58         1          9.5      9.5      0.0      runningCostModel.addCost("gripperPose", goalTrackingCost, 1)
    59         1          3.2      3.2      0.0      runningCostModel.addCost("xReg", xRegCost, 1e-1)
    60         1          2.2      2.2      0.0      runningCostModel.addCost("uReg", uRegCost, 1e-1)
    61         1          1.9      1.9      0.0      terminalCostModel.addCost("gripperPose", goalTrackingCost, 1e3)
    62                                           
    63                                               # Next, we need to create an action model for running and terminal knots. The
    64                                               # forward dynamics (computed using RNEA) are implemented
    65                                               # inside DifferentialActionModelFreeInvDynamics.
    66         1          0.3      0.3      0.0      dt = 1e-2
    67         2         12.5      6.3      0.0      runningModel = crocoddyl.IntegratedActionModelEuler(
    68         2         16.3      8.2      0.0          crocoddyl.DifferentialActionModelFreeInvDynamics(
    69         1          0.3      0.3      0.0              state, actuation, runningCostModel
    70                                                   ),
    71         1          0.3      0.3      0.0          dt,
    72                                               )
    73         2          3.5      1.7      0.0      terminalModel = crocoddyl.IntegratedActionModelEuler(
    74         2          3.9      2.0      0.0          crocoddyl.DifferentialActionModelFreeInvDynamics(
    75         1          0.3      0.3      0.0              state, actuation, terminalCostModel
    76                                                   ),
    77         1          0.3      0.3      0.0          0.0,
    78                                               )
    79                                           
    80                                               # For this optimal control problem, we define 100 knots (or running action
    81                                               # models) plus a terminal knot
    82         1          0.5      0.5      0.0      T = 100
    83         1       2886.0   2886.0      0.2      problem = crocoddyl.ShootingProblem(x0, [runningModel] * T, terminalModel)
    84                                           
    85                                               # Creating the solver for this OC problem, defining a logger
    86         1        476.4    476.4      0.0      solver = crocoddyl.SolverIntro(problem)
    87         1          0.7      0.7      0.0      cameraTF = [2.0, 2.68, 0.54, 0.2, 0.62, 0.72, 0.22]
    88         1          0.6      0.6      0.0      if WITHDISPLAY:
    89                                                   try:
    90                                                       import gepetto
    91                                           
    92                                                       gepetto.corbaserver.Client()
    93                                                       display = crocoddyl.GepettoDisplay(kinova, 4, 4, cameraTF, floor=False)
    94                                                       if WITHPLOT:
    95                                                           solver.setCallbacks(
    96                                                               [
    97                                                                   crocoddyl.CallbackVerbose(),
    98                                                                   crocoddyl.CallbackLogger(),
    99                                                                   crocoddyl.CallbackDisplay(display),
   100                                                               ]
   101                                                           )
   102                                                       else:
   103                                                           solver.setCallbacks(
   104                                                               [crocoddyl.CallbackVerbose(), crocoddyl.CallbackDisplay(display)]
   105                                                           )
   106                                                   except Exception:
   107                                                       display = crocoddyl.MeshcatDisplay(kinova)
   108         1          0.3      0.3      0.0      if WITHPLOT:
   109                                                   solver.setCallbacks(
   110                                                       [
   111                                                           crocoddyl.CallbackVerbose(),
   112                                                           crocoddyl.CallbackLogger(),
   113                                                       ]
   114                                                   )
   115                                               else:
   116         1         27.5     27.5      0.0          solver.setCallbacks([crocoddyl.CallbackVerbose()])
   117         1         10.6     10.6      0.0      solver.getCallbacks()[0].precision = 3
   118         1          6.3      6.3      0.0      solver.getCallbacks()[0].level = crocoddyl.VerboseLevel._2
   119                                           
   120                                               # Solving it with the solver algorithm
   121         1      77924.9  77924.9      4.6      solver.solve()
   122                                           
   123                                               """
   124                                               print(
   125                                                   "Finally reached = ",
   126                                                   solver.problem.terminalData.differential.multibody.pinocchio.oMf[
   127                                                       robot_model.getFrameId("j2s6s200_end_effector")
   128                                                   ].translation.T,
   129                                               )
   130                                               """
   131                                               # Plotting the solution and the solver convergence
   132         1          1.6      1.6      0.0      if WITHPLOT:
   133                                                   log = solver.getCallbacks()[1]
   134                                                   crocoddyl.plotOCSolution(
   135                                                       solver.xs,
   136                                                       [d.differential.multibody.joint.tau for d in solver.problem.runningDatas],
   137                                                       figIndex=1,
   138                                                       show=False,
   139                                                   )
   140                                                   crocoddyl.plotConvergence(
   141                                                       log.costs, log.u_regs, log.x_regs, log.grads, log.stops, log.steps, figIndex=2
   142                                                   )
   143                                           
   144                                               # Visualizing the solution in gepetto-viewer
   145         1          0.6      0.6      0.0      if WITHDISPLAY:
   146                                                   display.rate = -1
   147                                                   display.freq = 1
   148                                                   while True:
   149                                                       display.displayFromSolver(solver)
   150                                                       time.sleep(1.0)
   151                                           
   152         1        207.8    207.8      0.0      crocoddyl.stop_watch_report(2)
   153         1         25.6     25.6      0.0      exit(1)

