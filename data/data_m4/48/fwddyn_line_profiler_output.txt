Timer unit: 1e-06 s

Total time: 1.7354 s
File: arm_manipulation_fwddyn.py
Function: foo at line 13

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    13                                           @profile
    14                                           def foo():
    15         1         10.6     10.6      0.0      crocoddyl.enable_profiler()
    16         1         15.6     15.6      0.0      WITHDISPLAY = "display" in sys.argv or "CROCODDYL_DISPLAY" in os.environ
    17         1          4.7      4.7      0.0      WITHPLOT = "plot" in sys.argv or "CROCODDYL_PLOT" in os.environ
    18         1         30.6     30.6      0.0      signal.signal(signal.SIGINT, signal.SIG_DFL)
    19                                           
    20                                               # In this example test, we will solve the reaching-goal task with the Kinova arm.
    21                                               # For that, we use the forward dynamics (with its analytical derivatives) developed
    22                                               # inside crocoddyl; it is described inside DifferentialActionModelFreeFwdDynamics class.
    23                                               # Finally, we use an Euler sympletic integration scheme.
    24                                           
    25                                               # First, let's load create the state and actuation models
    26         1    1635073.7    2e+06     94.2      kinova = example_robot_data.load("iiwa")
    27         1          0.5      0.5      0.0      robot_model = kinova.model
    28         1         15.5     15.5      0.0      state = crocoddyl.StateMultibody(robot_model)
    29         1        131.0    131.0      0.0      actuation = crocoddyl.ActuationModelFull(state)
    30         1          6.7      6.7      0.0      q0 = kinova.model.referenceConfigurations["arm_up"]
    31         1         23.9     23.9      0.0      x0 = np.concatenate([q0, pinocchio.utils.zero(robot_model.nv)])
    32                                           
    33                                               # Create a cost model per the running and terminal action model.
    34         1          3.3      3.3      0.0      nu = state.nv
    35         1          5.3      5.3      0.0      runningCostModel = crocoddyl.CostModelSum(state)
    36         1          2.0      2.0      0.0      terminalCostModel = crocoddyl.CostModelSum(state)
    37                                           
    38                                               # Note that we need to include a cost model (i.e. set of cost functions) in
    39                                               # order to fully define the action model for our optimal control problem.
    40                                               # For this particular example, we formulate three running-cost functions:
    41                                               # goal-tracking cost, state and control regularization; and one terminal-cost:
    42                                               # goal cost. First, let's create the common cost functions.
    43         2         14.0      7.0      0.0      framePlacementResidual = crocoddyl.ResidualModelFramePlacement(
    44         1          0.2      0.2      0.0          state,
    45         1          3.3      3.3      0.0          robot_model.getFrameId("iiwa_joint_ee"),
    46         1         32.0     32.0      0.0          pinocchio.SE3(np.eye(3), np.array([0.6, 0.2, 0.5])),
    47         1          0.3      0.3      0.0          nu,
    48                                               )
    49         1          5.4      5.4      0.0      uResidual = crocoddyl.ResidualModelControl(state, nu)
    50         1          6.2      6.2      0.0      xResidual = crocoddyl.ResidualModelState(state, x0, nu)
    51         1         10.5     10.5      0.0      goalTrackingCost = crocoddyl.CostModelResidual(state, framePlacementResidual)
    52         1          4.6      4.6      0.0      xRegCost = crocoddyl.CostModelResidual(state, xResidual)
    53         1          3.6      3.6      0.0      uRegCost = crocoddyl.CostModelResidual(state, uResidual)
    54                                           
    55                                               # Then let's added the running and terminal cost functions
    56         1         10.2     10.2      0.0      runningCostModel.addCost("gripperPose", goalTrackingCost, 1)
    57         1          3.1      3.1      0.0      runningCostModel.addCost("xReg", xRegCost, 1e-1)
    58         1          2.1      2.1      0.0      runningCostModel.addCost("uReg", uRegCost, 1e-1)
    59         1          1.8      1.8      0.0      terminalCostModel.addCost("gripperPose", goalTrackingCost, 1e3)
    60                                           
    61                                               # Next, we need to create an action model for running and terminal knots. The
    62                                               # forward dynamics (computed using ABA) are implemented
    63                                               # inside DifferentialActionModelFreeFwdDynamics.
    64         1          0.2      0.2      0.0      dt = 1e-2
    65         2         15.0      7.5      0.0      runningModel = crocoddyl.IntegratedActionModelEuler(
    66         2         23.0     11.5      0.0          crocoddyl.DifferentialActionModelFreeFwdDynamics(
    67         1          0.2      0.2      0.0              state, actuation, runningCostModel
    68                                                   ),
    69         1          0.3      0.3      0.0          dt,
    70                                               )
    71         2          4.2      2.1      0.0      terminalModel = crocoddyl.IntegratedActionModelEuler(
    72         2          4.6      2.3      0.0          crocoddyl.DifferentialActionModelFreeFwdDynamics(
    73         1          0.3      0.3      0.0              state, actuation, terminalCostModel
    74                                                   ),
    75         1          0.3      0.3      0.0          0.0,
    76                                               )
    77                                           
    78                                               # For this optimal control problem, we define 100 knots (or running action
    79                                               # models) plus a terminal knot
    80         1          0.4      0.4      0.0      T = 100
    81         1       3726.9   3726.9      0.2      problem = crocoddyl.ShootingProblem(x0, [runningModel] * T, terminalModel)
    82                                           
    83                                               # Creating the DDP solver for this OC problem, defining a logger
    84         1        524.8    524.8      0.0      solver = crocoddyl.SolverFDDP(problem)
    85         1          1.3      1.3      0.0      cameraTF = [2.0, 2.68, 0.54, 0.2, 0.62, 0.72, 0.22]
    86         1          0.8      0.8      0.0      if WITHDISPLAY:
    87                                                   try:
    88                                                       import gepetto
    89                                           
    90                                                       gepetto.corbaserver.Client()
    91                                                       display = crocoddyl.GepettoDisplay(kinova, 4, 4, cameraTF, floor=False)
    92                                                       if WITHPLOT:
    93                                                           solver.setCallbacks(
    94                                                               [
    95                                                                   crocoddyl.CallbackVerbose(),
    96                                                                   crocoddyl.CallbackLogger(),
    97                                                                   crocoddyl.CallbackDisplay(display),
    98                                                               ]
    99                                                           )
   100                                                       else:
   101                                                           solver.setCallbacks(
   102                                                               [crocoddyl.CallbackVerbose(), crocoddyl.CallbackDisplay(display)]
   103                                                           )
   104                                                   except Exception:
   105                                                       display = crocoddyl.MeshcatDisplay(kinova)
   106         1          0.5      0.5      0.0      if WITHPLOT:
   107                                                   solver.setCallbacks(
   108                                                       [
   109                                                           crocoddyl.CallbackVerbose(),
   110                                                           crocoddyl.CallbackLogger(),
   111                                                       ]
   112                                                   )
   113                                               else:
   114         1         39.4     39.4      0.0          solver.setCallbacks([crocoddyl.CallbackVerbose()])
   115         1         12.4     12.4      0.0      solver.getCallbacks()[0].precision = 3
   116         1          7.2      7.2      0.0      solver.getCallbacks()[0].level = crocoddyl.VerboseLevel._2
   117                                           
   118                                               # Solving it with the solver algorithm
   119         1      95434.1  95434.1      5.5      solver.solve()
   120                                           
   121                                               """
   122                                               print(
   123                                                   "Finally reached = ",
   124                                                   solver.problem.terminalData.differential.multibody.pinocchio.oMf[
   125                                                       robot_model.getFrameId("iiwa_joint_ee")
   126                                                   ].translation.T,
   127                                               )
   128                                               """
   129                                           
   130                                               # Plotting the solution and the solver convergence
   131         1          1.3      1.3      0.0      if WITHPLOT:
   132                                                   log = solver.getCallbacks()[1]
   133                                                   crocoddyl.plotOCSolution(log.xs, log.us, figIndex=1, show=False)
   134                                                   crocoddyl.plotConvergence(
   135                                                       log.costs, log.u_regs, log.x_regs, log.grads, log.stops, log.steps, figIndex=2
   136                                                   )
   137                                           
   138                                               # Visualizing the solution in gepetto-viewer
   139         1          0.7      0.7      0.0      if WITHDISPLAY:
   140                                                   display.rate = -1
   141                                                   display.freq = 1
   142                                                   while True:
   143                                                       display.displayFromSolver(solver)
   144                                                       time.sleep(1.0)
   145                                           
   146         1        154.5    154.5      0.0      crocoddyl.stop_watch_report(2)
   147         1         28.3     28.3      0.0      exit(1)

